import cmd
from bibliotheque import Bibliotheque,Livre, Membre
from exceptions import *
from visualisations import Visualisation
import sys

class BibliothequeCLI(cmd.Cmd):
    """Interface en ligne de commande pour le syst√®me de gestion de biblioth√®que"""
    
    prompt = "\nüìö Biblioth√®que > "
    intro = """
=== Syst√®me de Gestion de Biblioth√®que ===
Tapez 'aide' pour la liste des commandes
Tapez 'menu' pour afficher le menu principal
"""

    def __init__(self):
        super().__init__()
        self.biblio = Bibliotheque()
        self.charger_donnees()
        
    def charger_donnees(self):
        """Charge les donn√©es au d√©marrage"""
        try:
            self.biblio.charger_donnees()
            print("\n‚úÖ Donn√©es charg√©es avec succ√®s")
        except Exception as e:
            print(f"\n‚ùå Erreur lors du chargement: {e}")

    def do_menu(self, arg):
        """Affiche le menu principal"""
        print("""
=== MENU PRINCIPAL ===
1.  Ajouter un livre
2.  Inscrire un membre
3.  Emprunter un livre
4.  Rendre un livre
5.  Lister les livres
6.  Lister les membres
7.  Rechercher un livre
8.  Voir les emprunts
9.  Statistiques
10. Sauvegarder & quitter

Tapez directement la commande (ex: 'ajouter_livre')
ou le num√©ro du menu (ex: '1')
""")

    # ===== Commandes de gestion =====
    def do_ajouter_livre(self, arg):
        """Ajoute un nouveau livre √† la biblioth√®que"""
        try:
            print("\n=== NOUVEAU LIVRE ===")
            isbn = input("ISBN: ").strip()
            titre = input("Titre: ").strip()
            auteur = input("Auteur: ").strip()
            annee = int(input("Ann√©e: ").strip())
            genre = input("Genre: ").strip()
            
            livre = Livre(isbn, titre, auteur, annee, genre)
            self.biblio.ajouter_livre(livre)
            print(f"\n‚úÖ Livre '{titre}' ajout√© avec succ√®s")
            
        except ValueError as e:
            print(f"\n‚ùå Erreur de saisie: {e}")
        except Exception as e:
            print(f"\n‚ùå Erreur: {e}")

    def do_inscrire_membre(self, arg):
        """Inscrit un nouveau membre"""
        try:
            print("\n=== NOUVEAU MEMBRE ===")
            id_membre = input("ID membre: ").strip()
            nom = input("Nom complet: ").strip()
            
            membre = Membre(id_membre, nom)
            self.biblio.enregistrer_membre(membre)
            print(f"\n‚úÖ Membre '{nom}' inscrit avec succ√®s")
            
        except Exception as e:
            print(f"\n‚ùå Erreur: {e}")

    # ===== Commandes d'emprunt =====
    def do_emprunter(self, arg):
        """Enregistre un emprunt de livre"""
        try:
            print("\n=== EMPRUNT ===")
            isbn = input("ISBN du livre: ").strip()
            id_membre = input("ID du membre: ").strip()
            
            self.biblio.emprunter_livre(isbn, id_membre)
            livre = self.biblio.livres[isbn]
            membre = self.biblio.membres[id_membre]
            
            print(f"\n‚úÖ '{livre.titre}' emprunt√© par {membre.nom}")
            
        except (LivreIndisponibleError, QuotaEmpruntDepasseError, 
                MembreInexistantError, LivreInexistantError) as e:
            print(f"\n‚ùå {e}")
        except Exception as e:
            print(f"\n‚ùå Erreur inattendue: {e}")

    def do_rendre(self, arg):
        """Enregistre le retour d'un livre"""
        try:
            print("\n=== RETOUR ===")
            isbn = input("ISBN du livre: ").strip()
            # D√©l√©gation √† la m√©thode m√©tier, g√®re erreurs et √©tats
            self.biblio.rendre_livre(isbn)
            livre = self.biblio.livres.get(isbn, None)
            titre = livre.titre if livre else isbn
            print(f"\n‚úÖ '{titre}' a √©t√© retourn√©")
            
        except LivreInexistantError as e:
            print(f"\n‚ùå {e}")
        except LivreNonEmprunteError as e:
            print(f"\n‚ö† {e}")
        except Exception as e:
            print(f"\n‚ùå Erreur: {e}")

    # ===== Commandes de consultation =====
    def do_lister_livres(self, arg):
        """Affiche la liste compl√®te des livres"""
        print("\n=== LIVRES DISPONIBLES ===")
        if not self.biblio.livres:
            print("Aucun livre enregistr√©")
            return
            
        for livre in self.biblio.livres.values():
            statut = "Disponible" if livre.statut == "disponible" else f"Emprunt√© ({livre.statut.split(':')[1]})"
            print(f"\nüìñ {livre.titre} ({livre.auteur}, {livre.annee})")
            print(f"   ISBN: {livre.isbn} | Genre: {livre.genre} | Statut: {statut}")

    def do_lister_membres(self, arg):
        """Affiche la liste des membres"""
        print("\n=== MEMBRES INSCRITS ===")
        if not self.biblio.membres:
            print("Aucun membre inscrit")
            return
            
        for membre in self.biblio.membres.values():
            print(f"\nüë§ {membre.nom} (ID: {membre.id})")
            print(f"   Livres emprunt√©s: {len(membre.livres_empruntes)}/{Membre.MAX_EMPRUNTS}")
            if membre.livres_empruntes:
                print("   Titres emprunt√©s:")
                for isbn in membre.livres_empruntes:
                    if isbn in self.biblio.livres:
                        print(f"    - {self.biblio.livres[isbn].titre}")

    def do_rechercher(self, arg):
        """Recherche un livre par titre, auteur ou genre"""
        terme = arg.strip().lower()
        if not terme:
            terme = input("\nEntrez un terme de recherche: ").lower().strip()
        if not terme:
            print("Veuillez entrer un terme de recherche")
            return
            
        resultats = [
            livre for livre in self.biblio.livres.values()
            if (terme in livre.titre.lower() or 
                terme in livre.auteur.lower() or 
                terme in livre.genre.lower())
        ]
        
        print(f"\nüîç {len(resultats)} r√©sultat(s) trouv√©(s):")
        for livre in resultats:
            print(f"\n- {livre.titre} ({livre.auteur}) | {livre.genre} | ISBN: {livre.isbn}")

    # ===== Commandes statistiques =====
    def do_statistiques(self, arg):
        """Affiche les statistiques de la biblioth√®que"""
        print("\n=== STATISTIQUES ===")
        print(f"üìö Nombre total de livres: {len(self.biblio.livres)}")
        print(f"üë• Nombre de membres: {len(self.biblio.membres)}")
        
        emprunts = sum(1 for l in self.biblio.livres.values() if l.statut != "disponible")
        print(f"üîÅ Emprunts actifs: {emprunts}")
        
        # Top 3 livres les plus emprunt√©s
        top_livres = self.biblio.top_livres_empruntes(3)
        if top_livres:
            print("\nüèÜ Top 3 des livres les plus emprunt√©s :")
            for livre, count in top_livres:
                print(f" - {livre.titre} ({count} emprunts)")

        # Top 3 membres les plus actifs
        top_membres = self.biblio.top_membres_actifs(3)
        if top_membres:
            print("\nüéñÔ∏è Top 3 des membres les plus actifs :")
            for membre, count in top_membres:
                print(f" - {membre.nom} ({count} emprunts)")

        # G√©n√©ration des graphiques
        try:
            print("\nüìä G√©n√©ration des graphiques...")
            Visualisation.generer_tous_graphiques(
                livres=list(self.biblio.livres.values()),
                historique_path="data/historique.csv"
            )
            print("‚úÖ Graphiques g√©n√©r√©s dans le dossier 'assets'")
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration: {e}")

    # ===== Commandes syst√®me =====
    def do_sauvegarder(self, arg):
        """Sauvegarde les donn√©es actuelles"""
        try:
            self.biblio.sauvegarder_donnees()
            print("\n‚úÖ Donn√©es sauvegard√©es avec succ√®s")
        except Exception as e:
            print(f"\n‚ùå Erreur lors de la sauvegarde: {e}")

    def do_quitter(self, arg):
        """Quitte l'application apr√®s sauvegarde"""
        self.do_sauvegarder(None)
        print("\nMerci d'avoir utilis√© notre syst√®me. Au revoir !")
        return True

    # ===== Commandes de suppression avec confirmation =====
    def do_supprimer_membre(self, arg):
        """Supprime un membre (avec confirmation)"""
        id_membre = arg.strip()
        if not id_membre:
            id_membre = input("ID du membre √† supprimer : ").strip()
        if id_membre not in self.biblio.membres:
            print(f"\n‚ùå Membre {id_membre} introuvable")
            return
        confirm = input(f"Confirmez la suppression du membre {id_membre} (o/N) ? ").lower()
        if confirm == 'o':
            try:
                self.biblio.supprimer_membre(id_membre)
                print(f"\n‚úÖ Membre {id_membre} supprim√©.")
            except Exception as e:
                print(f"\n‚ùå Erreur: {e}")
        else:
            print("Suppression annul√©e.")

    def do_supprimer_livre(self, arg):
        """Supprime un livre (avec confirmation)"""
        isbn = arg.strip()
        if not isbn:
            isbn = input("ISBN du livre √† supprimer : ").strip()
        if isbn not in self.biblio.livres:
            print(f"\n‚ùå Livre {isbn} introuvable")
            return
        confirm = input(f"Confirmez la suppression du livre {isbn} (o/N) ? ").lower()
        if confirm == 'o':
            try:
                self.biblio.supprimer_livre(isbn)
                print(f"\n‚úÖ Livre {isbn} supprim√©.")
            except Exception as e:
                print(f"\n‚ùå Erreur: {e}")
        else:
            print("Suppression annul√©e.")

    # ===== Commande exporter CSV =====
    def do_exporter_csv(self, arg):
        """Exporte les donn√©es actuelles en fichiers CSV"""
        try:
            self.biblio.exporter_csv()  # m√©thode √† impl√©menter c√¥t√© Bibliotheque
            print("\n‚úÖ Donn√©es export√©es avec succ√®s dans le dossier 'export'")
        except Exception as e:
            print(f"\n‚ùå Erreur lors de l'export : {e}")

    # ===== Commande aide avanc√©e =====
    def do_aide_avancee(self, arg):
        """Affiche des conseils et astuces avanc√©s pour l‚Äôutilisation"""
        print("""
Commandes avanc√©es utiles :
- exporter_csv : Sauvegarde les donn√©es en CSV dans 'export/'
- voir_emprunts : Liste les emprunts en cours
- rechercher [terme] : Chercher un livre par titre, auteur ou genre
- supprimer_membre [ID] : Supprimer un membre (avec confirmation)
- supprimer_livre [ISBN] : Supprimer un livre (avec confirmation)

Utilisez les raccourcis num√©riques pour un acc√®s rapide.
""")

    # ===== Commandes emprunts en cours =====
    def do_voir_emprunts(self, arg):
        """Affiche les emprunts en cours"""
        print("\n=== EMPRUNTS EN COURS ===")
        emprunts = [l for l in self.biblio.livres.values() if l.statut != "disponible"]
        
        if not emprunts:
            print("Aucun emprunt en cours")
            return
            
        for livre in emprunts:
            id_membre = livre.statut.split(":")[1]
            membre = self.biblio.membres.get(id_membre, None)
            nom_membre = membre.nom if membre else "Membre inconnu"
            print(f"\n- {livre.titre} emprunt√© par {nom_membre} (ID: {id_membre})")

    # ===== Commandes syst√®me =====
    def emptyline(self):
        """Ne rien faire quand on appuie sur Entr√©e sans commande"""
        pass

    def precmd(self, line):
        """Transforme les commandes en minuscules pour plus de tol√©rance"""
        return line.lower()

    def default(self, line):
        """G√®re les num√©ros de menu et commandes inconnues"""
        menus = {
            '1': 'ajouter_livre',
            '2': 'inscrire_membre',
            '3': 'emprunter',
            '4': 'rendre',
            '5': 'lister_livres',
            '6': 'lister_membres',
            '7': 'rechercher',
            '8': 'voir_emprunts',
            '9': 'statistiques',
            '10': 'quitter'
        }
        
        if line in menus:
            self.onecmd(menus[line])
        else:
            print(f"\n‚ùå Commande inconnue: {line}\nTapez 'aide' pour la liste des commandes")

if __name__ == "__main__":
    try:
        BibliothequeCLI().cmdloop()
    except KeyboardInterrupt:
        print("\n\nInterruption par l'utilisateur")
        sys.exit(0)
